<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<testCase id="36">
  <summary/>
  <steps>
    <apiCall apiId="com.provar.plugins.bundled.apis.bdd.Given" name="Given" testItemId="3" title="Given: Source data">
      <arguments>
        <argument id="description">
          <value class="value" valueClass="string">Source data</value>
        </argument>
      </arguments>
      <parameterValueSources>
        <parameterValueSource variableName="SourceData" variableScope="Test">
          <cacheToken>C:/Users/prinkal.gautam/Provar/QuickGuide/QuickGuide1/templates/UIfillLead.xlsx;1689057457469</cacheToken>
          <cachedParameters>
            <apiParam name="RowNumber"/>
            <apiParam name="Salutation"/>
            <apiParam name="FirstName"/>
            <apiParam name="LastName"/>
            <apiParam name="Company"/>
          </cachedParameters>
          <sourceValue class="excelTarget" namesLocation="FirstRowOfRange" whereComparison="EqualTo">
            <workbookPath class="value" valueClass="string">templates/UIfillLead.xlsx</workbookPath>
            <worksheetName class="value" valueClass="string">Sheet1</worksheetName>
            <valuesRange class="value" valueClass="string">A1:D3</valuesRange>
          </sourceValue>
        </parameterValueSource>
      </parameterValueSources>
      <clauses>
        <clause name="hidden" testItemId="4">
          <steps/>
        </clause>
      </clauses>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.bdd.When" name="When" testItemId="7" title="When: File is present">
      <arguments>
        <argument id="description">
          <value class="value" valueClass="string">File is present</value>
        </argument>
      </arguments>
      <parameterValueSources/>
      <clauses>
        <clause name="hidden" testItemId="8"/>
      </clauses>
    </apiCall>
    <apiCall apiId="com.provar.plugins.bundled.apis.bdd.Then" name="Then" testItemId="10" title="Then: change values">
      <arguments>
        <argument id="description">
          <value class="value" valueClass="string">change values</value>
        </argument>
      </arguments>
      <parameterValueSources/>
      <clauses>
        <clause name="hidden" testItemId="11">
          <steps>
            <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="20" title="Set Values: a.FirstName">
              <arguments>
                <argument id="values">
                  <value class="valueList" mutable="Mutable">
                    <namedValues mutable="Mutable">
                      <namedValue name="valuePath">
                        <value class="value" valueClass="string">a.Company</value>
                      </namedValue>
                      <namedValue name="value">
                        <value class="value" valueClass="string">Provar1</value>
                      </namedValue>
                      <namedValue name="valueScope">
                        <value class="value" valueClass="string">Test</value>
                      </namedValue>
                    </namedValues>
                    <namedValues mutable="Mutable">
                      <namedValue name="valuePath">
                        <value class="value" valueClass="string">a.FirstName</value>
                      </namedValue>
                      <namedValue name="value">
                        <value class="value" valueClass="string">Palak</value>
                      </namedValue>
                      <namedValue name="valueScope">
                        <value class="value" valueClass="string">Test</value>
                      </namedValue>
                    </namedValues>
                  </value>
                </argument>
              </arguments>
            </apiCall>
            <apiCall apiId="com.provar.plugins.bundled.apis.io.Write" name="Write" testItemId="19" title="Write: {a}=&gt;templates/UIfillLead.xlsx">
              <arguments>
                <argument id="data">
                  <value class="variable">
                    <path element="a"/>
                  </value>
                </argument>
                <argument id="dataUrl">
                  <value class="excelTarget" sheetWriteMode="Update">
                    <workbookPath class="value" valueClass="string">templates/UIfillLead.xlsx</workbookPath>
                    <worksheetName class="value" valueClass="string">Sheet1</worksheetName>
                  </value>
                </argument>
                <argument id="targetDescription">
                  <value class="value" valueClass="string">templates/UIfillLead.xlsx</value>
                </argument>
                <argument id="updateValueRange"/>
                <argument id="updateColumnNames">
                  <value class="value" valueClass="string">FirstRowOfRange</value>
                </argument>
                <argument id="updateMatchType">
                  <value class="value" valueClass="string">RowOrColNumber</value>
                </argument>
                <argument id="updateMatchLocator">
                  <value class="value" valueClass="string">2</value>
                </argument>
              </arguments>
              <generatedParameters>
                <apiParam group="result" name="updateValueRange" title="Values Range">
                  <summary>The range of cells that needs to updated. If nothing is specified entire sheet is targeted</summary>
                  <type>
                    <textType>
                      <constraints>
                        <valueConstraint name="disableTemplateEditor">true</valueConstraint>
                      </constraints>
                    </textType>
                  </type>
                </apiParam>
                <apiParam group="result" name="updateColumnNames" title="Column Names">
                  <summary>Identifies where the column names are in the spreadsheet:</summary>
                  <defaultValue>FirstRowOfRange</defaultValue>
                  <type>
                    <choiceType>
                      <constraints>
                        <valueConstraint name="boundedValues">FirstRowOfRange:Across the first row|FirstColumnOfRange:Down the first column</valueConstraint>
                      </constraints>
                    </choiceType>
                  </type>
                </apiParam>
                <apiParam group="result" internal="true" name="updateMatchType" title="">
                  <summary/>
                  <defaultValue>RowOrColNumber</defaultValue>
                  <type>
                    <choiceType>
                      <constraints>
                        <valueConstraint name="boundedValues">RowOrColNumber:Match by Position|Where:Match on Condition|MatchColumns:Match by Columns</valueConstraint>
                      </constraints>
                    </choiceType>
                  </type>
                </apiParam>
                <apiParam group="result" manuallyResolved="true" name="updateMatchLocator" title="Match Locator">
                  <summary>Identifies which rows in the Range will be updated. \n It can either be a row number (where the first row = 1) or a filtering condition against one or more columns (e.g. {firstName = "Joe" and surname = "Bloggs"}.</summary>
                </apiParam>
              </generatedParameters>
            </apiCall>
            <apiCall apiId="com.provar.plugins.bundled.apis.control.SetValues" name="SetValues" testItemId="22" title="Set Values: s">
              <arguments>
                <argument id="values">
                  <value class="valueList" mutable="Mutable">
                    <namedValues mutable="Mutable">
                      <namedValue name="valuePath">
                        <value class="value" valueClass="string">s</value>
                      </namedValue>
                      <namedValue name="value">
                        <value class="value" valueClass="string">60</value>
                      </namedValue>
                      <namedValue name="valueScope">
                        <value class="value" valueClass="string">Test</value>
                      </namedValue>
                    </namedValues>
                  </value>
                </argument>
              </arguments>
            </apiCall>
          </steps>
        </clause>
      </clauses>
    </apiCall>
  </steps>
</testCase>
